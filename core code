class trainENN:
    '''
    fea_num - 特征个数
    max_label - 最大的label值
    X - 训练集
    '''
    def __init__(self,fea_num,max_label,X,learn_rate):
        self.fea_num = fea_num
        self.max_label = max_label
        self.mLabel = max_label+1
        self.X = X
        self.learn_rate = learn_rate
    
    #获得物元模型
    def get_boundFrame(self):
        boundFrame = pd.DataFrame(np.arange(self.fea_num*self.mLabel).reshape((self.fea_num,self.mLabel)))
        for i in range(self.mLabel):
            m_data = self.X[self.X.iloc[:,-1]==i]
            m_max = list(m_data.max(axis = 0))
            m_min = list(m_data.min(axis = 0))
            R = pd.Series(list(zip(m_min,m_max))[:-1])
            boundFrame.iloc[:,i] = R
        boundFrame = boundFrame.T
        boundFrame = boundFrame.applymap(lambda x:list(x))
        return boundFrame
    
    def get_zFrame(self,boundFrame):
        zFrame = boundFrame.applymap(lambda x:(x[0]+x[1])/2)
        return zFrame
    
    def calc_ED(self,x,boundFrame,zFrame):
        '''
        参数：X - 每一条数据
        '''
        EDList = []
        for k in range(self.mLabel):
            ED = 0
            for j in range(self.fea_num):
                ED += ((abs(x[j]-zFrame.iloc[k,j])-((boundFrame.iloc[k,j][1]-boundFrame.iloc[k,j][0])/2))/
                abs((boundFrame.iloc[k,j][1]-boundFrame.iloc[k,j][0])/2)+1)
            EDList.append(ED)
        return EDList
    
    def get_kPre(self,EDList):
        kPre = np.argmin(EDList)
        return kPre

    def update_bound(self,x,boundFrame,zFrame,kLabel,kPre):
        for j in range(0,self.fea_num):
            boundFrame.iloc[kLabel,j][0] += self.learn_rate*(x[j]-zFrame.iloc[kLabel,j])
            boundFrame.iloc[kLabel,j][1] += self.learn_rate*(x[j]-zFrame.iloc[kLabel,j]) 
            boundFrame.iloc[kPre,j][0] -= self.learn_rate*(x[j]-zFrame.iloc[kPre,j])
            boundFrame.iloc[kPre,j][1] -= self.learn_rate*(x[j]-zFrame.iloc[kPre,j])
        return boundFrame

    def update_z(self,x,zFrame,kLabel,kPre):
        for j in range(self.fea_num):
            zFrame.iloc[kLabel,j] += self.learn_rate*(x[j]-zFrame.iloc[kLabel,j])
            zFrame.iloc[kPre,j] -= self.learn_rate*(x[j]-zFrame.iloc[kPre,j])        
        return zFrame
    
    def fit(self,errorMax=0.001):
        start = time.clock()
        boundFrame = self.get_boundFrame()
        zFrame = self.get_zFrame(boundFrame)
        epochs = 0
        errorRate = 1
        while errorRate>errorMax and epochs<50: 
            epochs +=1
            errorNum = 0
            m = len(self.X)
            for i in range(0,m):
                x = self.X.iloc[i,:]
                EDList = self.calc_ED(x,boundFrame,zFrame)
                kPre = self.get_kPre(EDList)
                kLabel = int(x[-1]) 
                if kLabel != kPre:
                    errorNum += 1
                    boundFrame = self.update_bound(x,boundFrame,zFrame,kLabel,kPre)
                    zFrame = self.update_z(x,zFrame,kLabel,kPre)
            errorRate = errorNum/m
        end = time.clock()
        T = float(end-start)
        return boundFrame,zFrame,epochs,T
    
class testENN:
    '''
    boundFrame,zFrame - 更新后的
    X - test data
    '''
    def __init__(self,X,boundFrame,zFrame,fea_num,max_label):
        self.X = X
        self.boundFrame = boundFrame
        self.zFrame = zFrame
        self.fea_num = fea_num
        self.max_label = max_label
        self.mLabel = max_label+1
    
    def calc_ED(self,x):
        '''
        参数：x - 每一条数据
        '''
        EDList = []
        for k in range(0,self.mLabel):
            ED = 0
            for j in range(0,self.fea_num):
                ED += ((abs(x[j]-self.zFrame.iloc[k,j])-
                        ((self.boundFrame.iloc[k,j][1]-self.boundFrame.iloc[k,j][0])/2))/
                abs((self.boundFrame.iloc[k,j][1]-self.boundFrame.iloc[k,j][0])/2)+1)
            EDList.append(ED)
        return EDList
    
    def get_kPre(self,EDList):
        kPre = np.argmin(EDList)
        return kPre
    
    def test(self):
        start = time.clock()
        m = len(self.X)
        count = 0
        for i in range(m):
            x = self.X.iloc[i,:]
            EDList = self.calc_ED(x)
            kPre = self.get_kPre(EDList)
            if kPre == int(x[-1]):
                count +=1
        end = time.clock()
        T = float(end-start)
        return count/m,T
